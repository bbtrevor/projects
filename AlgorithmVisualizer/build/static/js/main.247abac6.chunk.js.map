{"version":3,"sources":["Components/Header.js","Components/InteractiveBox.js","Components/DropDownBox.js","Components/Node.js","Components/Edge.js","Components/Graph.js","Components/Popup.js","Algorithms/Dijkstras.js","Tutorial/dijkstras_tutorial_1.PNG","Tutorial/dijkstras_tutorial_2_resized.gif","Tutorial/dijkstras_tutorial_3_resized.gif","Tutorial/dijkstras_tutorial_4_resized.gif","Tutorial/dijkstras_tutorial_5_resized.gif","Tutorial/dijkstras_tutorial_6.PNG","Tutorial/dijkstras_tutorial_7_resized.gif","Tutorial/dijkstras_tutorial_8_resized.gif","App.js","reportWebVitals.js","index.js"],"names":["Header","className","InteractiveBox","props","id","onClick","clickedOptions","options","map","option","i","href","e","getSelectedOption","runTutorial","DropDownBox","active","isActive","content","selectedOption","disabled","algorithmInProgress","runAlgorithm","clearGraph","selectedNode","nodeOnDelete","selectedEdge","edgeOnDelete","style","marginRight","isGeneratingRandomGraph","createRandomGraph","Node","pos","position","height","node","radius","width","top","y","left","x","toString","Edge","edge","length","Math","sqrt","endX","startX","endY","startY","centerX","centerY","thickness","angle","atan2","PI","MozTransform","WebkitTransform","OTransform","msTransform","Transform","Graph","nodes","nodeOnClick","onDelete","edges","edgeOnClick","Popup","display","enabled","showPath","distances","endIndex","setAlgorithmInProgress","m","intervalID","setInterval","forEach","document","getElementById","classList","add","clearInterval","App","tutorial","fontSize","onQuitTutorial","clickedNextTutorial","src","tutorial_1","alt","tutorial_2","tutorial_3","tutorial_4","tutorial_5","tutorial_6","tutorial_7","tutorial_8","textDecoration","color","welcomePopup","setPopupEnabled","useState","dropdownIsActive","setDropdownIsActive","createGraphManuallyEnabled","setCreateGraphManuallyEnabled","setSelectedOption","setNodes","setEdges","setSelectedNode","setSelectedEdge","currentNodeId","setCurrentNodeId","currentEdgeId","setCurrentEdgeId","startNode","setStartNode","endNode","setEndNode","algorithmJustFinished","setAlgorithmJustFinished","setIsGeneratingRandomGraph","popupEnabled","popupContent","setPopupContent","tutorialPageIndex","window","event","preventDefault","optionsContent","optionsButton","border","pointIsOnNode","ptX","ptY","this","equals","node1","node2","weight","offset","bound","getBoundingClientRect","html","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","edgeElement","remove","nodeElement","setTimeout","getRandomInt","floor","random","isConnected","visited","Array","depthFirstSearch","connected","start","indexOf","neighbor","disablePopup","runDijkstras","end","n","contains","startIndex","paths","currDis","Infinity","selectedElements","shortestDistance","shortestIndex","push","currNode","elements","k","otherNode","a","some","Dijkstras","newEdge","spawnEdge","nodeToDelete","filter","idsToDelete","nodeEdges","j","splice","includes","o","pageX","pageY","right","appOnClick","button","target","innerHTML","borderRadius","timeoutTime","currentNodeIdForRandomGraph","currentEdgeIdForRandomGraph","graphElement","boundingRect","graph","xFieldDifference","yBound","xBound","xClone","nodesToSpawn","nodesSpawned","randomNodes","randomEdges","num1","num2","console","log","concat","yFieldDifference","pop","nodeWord","isValid","newNode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.247abac6.chunk.js","sourcesContent":["const Header = () => {\r\n    return (\r\n        <div className='header'>\r\n            <h1 className='title'>Dijkstra's Algorithm Visualizer</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","const InteractiveBox = (props) => {\r\n\r\n\r\n    return (\r\n        <div className='interactive-box'>\r\n            <div id='options-dropdown'>\r\n                <button id='options-button' onClick={props.clickedOptions}>\r\n                    Options <span className='dropdown-arrow'>▼</span>\r\n                </button>\r\n                    <div id='options-dropdown-content'>\r\n                        {props.options.map((option, i) => \r\n                            <a className='options' href='#' onClick={(e) => props.getSelectedOption(e)} key={i}>\r\n                                {option}\r\n                            </a>\r\n                        )}\r\n                    </div>\r\n            </div>\r\n            <button id='tutorial-button' onClick={props.runTutorial} >Tutorial</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InteractiveBox\r\n","const DropDownBox = (props) => {\r\n\r\n    var active = props.isActive ? ' drop-down-active' : ''\r\n    var content = ''\r\n    if (props.selectedOption === 'Create graph manually') {\r\n        content = (\r\n            <div className='drop-down-box-text'>\r\n                <button className='btn btn-light run-algorithm' disabled={props.algorithmInProgress} \r\n                    onClick={props.runAlgorithm}>Run Dijkstra's</button>\r\n                <button className='btn btn-light clear-graph' onClick={props.clearGraph} >Clear graph</button>\r\n                <button className='btn btn-light delete-node' disabled={props.selectedNode == null} \r\n                    onClick={props.nodeOnDelete}>Delete selected node</button>\r\n                <button className='btn btn-light delete-edge' disabled={props.selectedEdge == null} \r\n                    onClick={props.edgeOnDelete}>Deleted selected edge</button>\r\n            </div>\r\n        )\r\n    }\r\n    else if (props.selectedOption === 'Create random graph') {\r\n        content = (\r\n            <div className='drop-down-box-text'>\r\n                <button className='btn btn-light run-algorithm' disabled={props.algorithmInProgress} \r\n                    onClick={props.runAlgorithm}>Run Dijkstra's</button>\r\n                <button className='btn btn-light' style={{marginRight: '15px'}} disabled={props.isGeneratingRandomGraph} onClick={props.createRandomGraph}>Generate a random graph</button>\r\n                <button className='btn btn-light clear-graph' onClick={props.clearGraph}>Clear graph</button>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        content = ''\r\n    }\r\n    return (\r\n        \r\n        <div className={'drop-down-box' + active}>\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DropDownBox\r\n","const Node = (props) => {\r\n    const pos = {\r\n        position: 'absolute',\r\n        height: props.node.radius * 2,\r\n        width: props.node.radius * 2,\r\n        top: props.node.y - props.node.radius,\r\n        left: props.node.x - props.node.radius\r\n    }\r\n    let id = 'node-' + (props.node.id).toString()\r\n    return (\r\n        <div className='node created-element default-color' id={id} onClick={() => props.onClick(props.node)} style={pos}>\r\n            \r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Node\r\n","\r\nconst Edge = (props) => {\r\n    const edge = props.edge\r\n    const thickness = 3\r\n    const length = Math.sqrt((edge.endX - edge.startX)**2 + (edge.endY - edge.startY)**2)\r\n    const centerX = ((edge.startX + edge.endX) / 2) - (length / 2)\r\n    const centerY = ((edge.startY + edge.endY) / 2) - (thickness / 2)\r\n    const angle = Math.atan2((edge.endY - edge.startY), (edge.endX - edge.startX)) * (180 / Math.PI)\r\n    const style = {\r\n        height: thickness,\r\n        left: centerX,\r\n        top: centerY,\r\n        width: length,\r\n        MozTransform: `rotate(${angle}deg)`,\r\n        WebkitTransform: `rotate(${angle}deg)`,\r\n        OTransform: `rotate(${angle}deg)`,\r\n        msTransform: `rotate(${angle}deg)`,\r\n        Transform: `rotate(${angle}deg)`,\r\n    }    \r\n    let id = 'edge-' + (edge.id).toString()\r\n\r\n    return (\r\n        <div className='edge created-element default-color' id={id} onClick={(e) => props.onClick(e, edge)} style={style}>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Edge\r\n","import Node from './Node'\r\nimport PropTypes from 'prop-types'\r\nimport Edge from './Edge'\r\n\r\nconst Graph = (props) => {\r\n    \r\n    return (\r\n        <div className='graph-container'>\r\n            <div id='graph' onClick={(e) => props.onClick(e)}>\r\n    \r\n\r\n                    {props.nodes.map((node) => \r\n                    <Node key={node.id} id={node.id} node={node} onClick={props.nodeOnClick} onDelete={props.nodeOnDelete}/>)}\r\n                    {props.edges.map((edge, i) => \r\n                    <Edge key={edge.id} id = {edge.id} edge={edge} onClick={props.edgeOnClick} onDelete={props.edgeOnDelete}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nGraph.propTypes = {\r\n    \r\n}\r\n\r\nexport default Graph\r\n","import React from 'react'\r\n\r\nconst Popup = (props) => {\r\n    return (\r\n        <div id='popup' style={{display: props.enabled ? 'block' : 'none'}}>\r\n            {props.content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Popup\r\n","\r\nfunction showPath(distances, endIndex, setAlgorithmInProgress) {\r\n    let m = 0\r\n    let intervalID = setInterval(() => {\r\n        if (m >= distances[endIndex].nodes.length) {\r\n            distances[endIndex].edges.forEach((e) => {\r\n                document.getElementById('edge-' + (e.id).toString()).classList.add('selected-element')\r\n            })\r\n            setAlgorithmInProgress(false)\r\n            clearInterval(intervalID)\r\n            return\r\n        }\r\n        document.getElementById('node-' + (distances[endIndex].nodes[m].id).toString()).classList.add('selected-element')\r\n        m++\r\n    }, 375)\r\n}\r\n\r\nexport function Dijkstras(nodes, start, end, setAlgorithmInProgress) {\r\n    var distances = new Array(nodes.length);\r\n    let startIndex = nodes.indexOf(start)\r\n    let endIndex = nodes.indexOf(end)\r\n    let paths = new Array(nodes.length)\r\n\r\n    var visited = new Array(nodes.length);\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        distances[i] = {\r\n            currDis: Infinity,\r\n            edges: [],\r\n            nodes: []\r\n        }\r\n        visited[i] = false\r\n        paths[i] = new Array(nodes.length)\r\n    }\r\n    distances[startIndex].currDis = 0;\r\n\r\n    let selectedElements = []\r\n    while (true) {\r\n        var shortestDistance = Infinity;\r\n        var shortestIndex = -1;\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            if (distances[i].currDis < shortestDistance && !visited[i]) {\r\n                shortestDistance = distances[i].currDis;\r\n                shortestIndex = i;\r\n            }\r\n        }\r\n        if (shortestIndex === -1) {\r\n            for (let n = 0; n < distances.length; n++) {\r\n                distances[n].nodes.push(nodes[n])\r\n            }\r\n            break;\r\n        }\r\n        let currNode = nodes[shortestIndex]\r\n        let elements = []\r\n        let n = document.getElementById('node-' + (currNode.id).toString())\r\n        elements.push(n)\r\n        for (var i = 0; i < currNode.edges.length; i++) {\r\n            let x = currNode.edges[i].node1.equals(currNode) ? nodes.indexOf(currNode.edges[i].node2) : \r\n                nodes.indexOf(currNode.edges[i].node1)\r\n            if (distances[x].currDis > distances[shortestIndex].currDis + currNode.edges[i].weight) {\r\n                distances[x].currDis = distances[shortestIndex].currDis + currNode.edges[i].weight;\r\n                for (let k = 0; k < distances[shortestIndex].edges.length; k++) {\r\n                    distances[x].edges.push(distances[shortestIndex].edges[k])\r\n                    distances[x].nodes.push(distances[shortestIndex].nodes[k])\r\n                }\r\n                distances[x].edges.push(currNode.edges[i])\r\n                distances[x].nodes.push(currNode)\r\n                let e = document.getElementById('edge-' + (currNode.edges[i].id).toString())\r\n                let otherNode = document.getElementById('node-' + (nodes[x].id).toString())\r\n                elements.push(e)\r\n                elements.push(otherNode)\r\n            }\r\n        }\r\n        selectedElements.push(elements)\r\n        elements = []\r\n        visited[shortestIndex] = true;\r\n    }\r\n    let n = 0\r\n    let interval1Time = 750\r\n    let intervalID = setInterval(() => {\r\n        if (n >= selectedElements.length) {\r\n            if (selectedElements[n - 1] != null && selectedElements[n - 1].length > 0) {\r\n                selectedElements[n - 1].forEach((e) => {\r\n                    if (e.classList.contains('selected-element')) {\r\n                        e.classList.remove('selected-element')\r\n                    }\r\n                })\r\n            }\r\n            clearInterval(intervalID)\r\n            setTimeout(showPath, 500, distances, endIndex, setAlgorithmInProgress)\r\n            return\r\n        }\r\n        selectedElements[n].forEach((e) => {\r\n            e.classList.add('selected-element')\r\n        })\r\n        if (n > 0) {\r\n            for (let a = 0; a < selectedElements[n - 1].length; a++) {\r\n                if (!(selectedElements[n].some((e) => e.id === selectedElements[n - 1][a].id)) && \r\n                    selectedElements[n - 1][a].classList.contains('selected-element')) {\r\n                    selectedElements[n - 1][a].classList.remove('selected-element')\r\n                }\r\n            }\r\n        }\r\n        n++\r\n    }, interval1Time)\r\n    return distances\r\n}\r\n","export default __webpack_public_path__ + \"static/media/dijkstras_tutorial_1.a1d0377e.PNG\";","export default __webpack_public_path__ + \"static/media/dijkstras_tutorial_2_resized.c1364881.gif\";","export default __webpack_public_path__ + \"static/media/dijkstras_tutorial_3_resized.14b98ccd.gif\";","export default __webpack_public_path__ + \"static/media/dijkstras_tutorial_4_resized.460a1cd9.gif\";","export default __webpack_public_path__ + \"static/media/dijkstras_tutorial_5_resized.b7c0df27.gif\";","export default __webpack_public_path__ + \"static/media/dijkstras_tutorial_6.072c2c26.PNG\";","export default __webpack_public_path__ + \"static/media/dijkstras_tutorial_7_resized.92df0b9c.gif\";","export default __webpack_public_path__ + \"static/media/dijkstras_tutorial_8_resized.076164fa.gif\";","import './master.css'\nimport { useState } from 'react'\nimport Header from './Components/Header'\nimport InteractiveBox from './Components/InteractiveBox';\nimport DropDownBox from './Components/DropDownBox';\nimport Graph from './Components/Graph';\nimport Popup from './Components/Popup';\nimport { Dijkstras } from './Algorithms/Dijkstras'\nimport tutorial_1 from './Tutorial/dijkstras_tutorial_1.PNG'\nimport tutorial_2 from './Tutorial/dijkstras_tutorial_2_resized.gif'\nimport tutorial_3 from './Tutorial/dijkstras_tutorial_3_resized.gif'\nimport tutorial_4 from './Tutorial/dijkstras_tutorial_4_resized.gif'\nimport tutorial_5 from './Tutorial/dijkstras_tutorial_5_resized.gif'\nimport tutorial_6 from './Tutorial/dijkstras_tutorial_6.PNG'\nimport tutorial_7 from './Tutorial/dijkstras_tutorial_7_resized.gif'\nimport tutorial_8 from './Tutorial/dijkstras_tutorial_8_resized.gif'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n\n  const tutorial = [\n    (\n      <div>\n        <h1>Dijkstra's Pathfinding Visualizer Tutorial</h1>\n        <p style={{fontSize:'18px'}}>This tutorial will walk you through everything you need to know to use the features of this application.</p>\n        <br/>\n        <p>When you're ready, click \"Get Started\" to start the tutorial!</p>\n        <button className='btn tutorial-button-quit' onClick={onQuitTutorial}>Quit Tutorial</button>\n        <button className='btn tutorial-button-next' onClick={clickedNextTutorial}>Get Started!</button>\n      </div>\n    ),\n    (\n      <div>\n        <h1>How does Dijkstra's work?</h1>\n        <p>Dijkstra's algorithm guarantees the shortest path from one node to another by finding the shortest path from \n          the starting node to every other node in the graph, and using that information to determine the shortest path \n          from the start node to the specified end node.\n        </p>\n        <button className='btn tutorial-button-quit' onClick={onQuitTutorial}>Quit Tutorial</button>\n        <button className='btn tutorial-button-next' onClick={clickedNextTutorial}>Next</button>\n      </div>\n    ),\n    (\n      <div>\n        <h1>Choosing an option</h1>\n        <img src={tutorial_1} alt={'tut-1'}/>\n        <p>\n          To create a graph, you must first choose between creating it manually or having a random graph generated. To do this, select \n          the \"Options\" dropdown and choose which method of creating a graph you want.\n        </p>\n        <button className='btn tutorial-button-quit' onClick={onQuitTutorial}>Quit Tutorial</button>\n        <button className='btn tutorial-button-next' onClick={clickedNextTutorial}>Next</button>\n      </div>\n\n    ),\n    (\n      <div>\n        <h1>\n          Manually creating a graph\n        </h1>\n        <h3>Creating nodes</h3>\n        <img src={tutorial_2} alt={'tut-2'} />\n        <p>\n          To create a node, simply click within the graph area designated by the black border, as shown above.\n        </p>\n        <button className='btn tutorial-button-quit' onClick={onQuitTutorial}>Quit Tutorial</button>\n        <button className='btn tutorial-button-next' onClick={clickedNextTutorial}>Next</button>\n      </div>\n    ),\n    (\n      <div>\n        <h1>Manually creating a graph (cont.)</h1>\n        <h3>Creating edges</h3>\n        <img src={tutorial_3} alt={'tut-3'} />\n        <p>\n          To create an edge, simply click the first node of the edge followed by the second node of the edge, as shown above.\n        </p>\n        <button className='btn tutorial-button-quit' onClick={onQuitTutorial}>Quit Tutorial</button>\n        <button className='btn tutorial-button-next' onClick={clickedNextTutorial}>Next</button>\n      </div>\n    ),\n    (\n      <div>\n        <h1>Manually creating a graph (cont.)</h1>\n        <h3>Deleting a node</h3>\n        <img src={tutorial_4} alt={'tut-4'} />\n        <p>To delete a node, click the node that you want to deleted, then click the \"Delete selected node\" button. \n          This will delete the node you selected as well as all of the edges connected to it.\n        </p>\n        <button className='btn tutorial-button-quit' onClick={onQuitTutorial}>Quit Tutorial</button>\n        <button className='btn tutorial-button-next' onClick={clickedNextTutorial}>Next</button>\n      </div>\n    ),\n    (\n      <div>\n        <h1>Manually creating a graph (cont.)</h1>\n        <h3>Deleting an edge</h3>\n        <img src={tutorial_5} alt={'tut-5'} />\n        <p>To delete an edge, click the edge that you want to delete, then click the \"Delete selected edge\" button</p>\n        <button className='btn tutorial-button-quit' onClick={onQuitTutorial}>Quit Tutorial</button>\n        <button className='btn tutorial-button-next' onClick={clickedNextTutorial}>Next</button>\n      </div>\n    ),\n    (\n      <div>\n        <h1>Creating a random graph</h1>\n        <img src={tutorial_6} alt={'tut-6'} />\n        <p>To create a random graph, simply click \"Generate a random graph\", and wait for the graph to be generated!</p>\n        <button className='btn tutorial-button-quit' onClick={onQuitTutorial}>Quit Tutorial</button>\n        <button className='btn tutorial-button-next' onClick={clickedNextTutorial}>Next</button>\n      </div>\n    ),\n    (\n      <div>\n        <h1>Running the algorithm</h1>\n        <img src={tutorial_7} alt={'tut-7'} />\n        <p>Once you have created a graph, you may click the \"Run Dijkstra's\" button to start. After this, \n          you must first select the start node, followed by the end node. This will prompt the algorithm to begin and start \n          visualizing!\n        </p>\n        <button className='btn tutorial-button-quit' onClick={onQuitTutorial}>Quit Tutorial</button>\n        <button className='btn tutorial-button-next' onClick={clickedNextTutorial}>Next</button>\n      </div>\n    ),\n    (\n      <div>\n        <h1>Clearing a graph</h1>\n        <img src={tutorial_8} alt={'tut-8'} />\n        <p>You may clear a graph while creating it or after the algorithm has finished by simply clicking the \"Clear Graph\" button. \n        </p>\n        <button className='btn tutorial-button-quit' onClick={onQuitTutorial}>Quit Tutorial</button>\n        <button className='btn tutorial-button-next' onClick={clickedNextTutorial}>Next</button>\n      </div>\n    ),\n    (\n      <div>\n        <h1>That's it!</h1>\n        <p>\n          If you missed something, click\n          <a style={{textDecoration:'none', color: 'red'}} onClick={runTutorial} href='#'>\n            <b> here </b>\n          </a> \n          to go through the tutorial again. Otherwise, click \"Quit Tutorial\", and Happy Visualizing!\n        </p>\n        <button className='btn tutorial-button-quit' onClick={onQuitTutorial}>Quit Tutorial</button>\n      </div>\n    )\n  ]\n\n  const welcomePopup = (\n    <div>\n      <h1>Welcome to Dijkstra's Pathfinding Visualizer!</h1>\n      <p>\n        This application provides several features to help visualize one of the most popular shortest pathfinding algorithms - Dijkstra's Algorithm. \n        To learn more about some of these features, feel free to go through the \n        <a style={{textDecoration:'none', color: 'red'}} onClick={runTutorial} href='#'>\n          <b> tutorial</b>\n        </a> for this application.\n      </p>\n      <br/>\n      <p>Otherwise, click \"Exit\" to start visualizing!</p>\n      <button className='btn' onClick={onQuitWelcome}>Exit</button>\n    </div>\n  )\n\n  const [dropdownIsActive, setDropdownIsActive] = useState(false)\n  const [createGraphManuallyEnabled, setCreateGraphManuallyEnabled] = useState(false);\n  const [selectedOption, setSelectedOption] = useState('')\n  const [nodes, setNodes] = useState([])\n  const [edges, setEdges] = useState([])\n  const [selectedNode, setSelectedNode] = useState(null)\n  const [selectedEdge, setSelectedEdge] = useState(null)\n  const [currentNodeId, setCurrentNodeId] = useState(0)\n  const [currentEdgeId, setCurrentEdgeId] = useState(0)\n  const [algorithmInProgress, setAlgorithmInProgress] = useState(false)\n  const [startNode, setStartNode] = useState(null)\n  const [endNode, setEndNode] = useState(null)\n  const [algorithmJustFinished, setAlgorithmJustFinished] = useState(false)\n  const [isGeneratingRandomGraph, setIsGeneratingRandomGraph] = useState(false)\n  const [popupEnabled, setPopupEnabled] = useState(true)\n  const [popupContent, setPopupContent] = useState(welcomePopup)\n\n  const options = [\n    '',\n    'Create graph manually',\n    'Create random graph' \n  ]\n\n  let tutorialPageIndex = -1\n\n  function runTutorial() {\n    window.event.preventDefault()\n    if (tutorialPageIndex == -1) {\n      clickedNextTutorial()\n    }\n    else if (tutorialPageIndex == tutorial.length - 1) {\n      tutorialPageIndex = 0\n      setPopupContent(tutorial[tutorialPageIndex])\n    }\n    if (!popupEnabled) {\n      setPopupEnabled(true)\n      let optionsContent = document.getElementById('options-dropdown-content')\n      let optionsButton = document.getElementById('options-button')\n      optionsContent.style.display = ''\n      optionsButton.style.border = 'none'\n    }\n  }\n\n  function onQuitTutorial() {\n    setPopupEnabled(false)\n    tutorialPageIndex = -1\n  }\n\n  function onQuitWelcome() {\n    setPopupEnabled(false)\n  }\n  \n  function clickedNextTutorial() {\n    if (tutorialPageIndex == tutorial.length - 1) {\n      setPopupEnabled(false)\n      tutorialPageIndex = -1\n    }\n    else {\n      tutorialPageIndex++\n      setPopupContent(tutorial[tutorialPageIndex])\n    }\n  }\n\n  const GetSelectedOption = (e) => {\n    window.event.preventDefault()\n    let content = document.getElementById('options-dropdown-content')\n    let button = document.getElementById('options-button')\n    switch (e.target.innerHTML) {\n      case options[0]:\n        setCreateGraphManuallyEnabled(false)\n        setDropdownIsActive(false)\n        setSelectedOption(options[0])\n        break\n      case options[1]:\n        if (nodes.length > 0) {\n          clearGraph()\n        }\n        setCreateGraphManuallyEnabled(true)\n        setDropdownIsActive(true)\n        setSelectedOption(options[1])\n        break\n      case options[2]:\n        if (nodes.length > 0) {\n          clearGraph()\n        }\n        setCreateGraphManuallyEnabled(false)\n        setDropdownIsActive(true)\n        setSelectedOption(options[2])\n        break\n      default:\n        break\n    }\n    content.style.display = ''\n    button.style.border = 'none'\n  }\n\n  function pointIsOnNode(ptX, ptY, node) {\n    var d = (ptX - node.x)**2 + (ptY - node.y)**2\n    if (d <= node.radius**2) {\n      return true\n    }\n    return false\n  }\n\n  function Node(x, y) {\n    this.x = x;\n    this.y = y;\n    this.radius = 10;\n    this.id = currentNodeId;\n    this.edges = [];\n    setCurrentNodeId(currentNodeId + 1)\n    this.equals = function(node) {\n      if (this.x == node.x && \n          this.y == node.y && \n          this.radius == node.radius) {\n            return true\n          }\n        return false\n    }\n  }\n\n  function Edge(node1, node2) {\n    this.node1 = node1;\n    this.node2 = node2;\n    this.startX = node1.x;\n    this.startY = node1.y;\n    this.endX = node2.x;\n    this.endY = node2.y;\n    this.weight = 1;\n    this.id = currentEdgeId;\n    setCurrentEdgeId(currentEdgeId + 1)\n    this.equals = function(edge) {\n      if (this.node1.equals(edge.node1) && \n          this.node2.equals(edge.node2)) {\n            return true\n          }\n        return false\n    }\n  }\n\n  function offset(e) {\n    var bound = e.getBoundingClientRect();\n    var html = document.documentElement;\n    return {\n      left: bound.left + window.pageXOffset - html.clientLeft,\n      top: bound.top + window.pageYOffset - html.clientTop\n    }\n  }\n\n  function clearGraph() {\n    if (popupEnabled) {\n      return\n    }\n    if (algorithmInProgress) {\n      return\n    }\n    setAlgorithmJustFinished(false)\n    for (let i = 0; i < edges.length; i++) {\n      let edgeElement = document.getElementById('edge-' + (edges[i].id).toString())\n      edgeElement.classList.remove('created-element')\n      edgeElement.classList.add('deleted-element') \n    }\n    for (let i = 0; i < nodes.length; i++) {\n      let nodeElement = document.getElementById('node-' + (nodes[i].id).toString())\n      nodeElement.classList.remove('created-element')\n      nodeElement.classList.add('deleted-element') \n    }\n    setTimeout(() => {\n      setSelectedEdge(null)\n      setSelectedNode(null)\n      setEdges([])\n      setNodes([])\n    }, 301)\n  }\n\n  function getRandomInt(x) {\n    return Math.floor(Math.random() * x)\n  }\n\n  function isConnected(nodes) {\n    if (nodes.length == 0) {\n      return false\n    }\n    let visited = new Array(nodes.length)\n    depthFirstSearch(nodes[0], nodes, visited)\n\n    let connected = true\n    for (let i = 0; i < visited.length; i++) {\n      if (!visited[i]) {\n        connected = false\n        break\n      }\n    }\n    return connected\n  }\n\n  function depthFirstSearch(start, nodes, visited) {\n    visited[nodes.indexOf(start)] = true\n    for (let i = 0; i < start.edges.length; i++) {\n      let neighbor = start.equals(start.edges[i].node1) ? start.edges[i].node2 : \n        start.edges[i].node1\n      if (!visited[nodes.indexOf(neighbor)]) {\n        depthFirstSearch(neighbor, nodes, visited)\n      }\n    }\n  }\n\n  function disablePopup() {\n    setPopupEnabled(false)\n  }\n\n  function runAlgorithm() {\n    if (popupEnabled) {\n      return\n    }\n    else if (nodes.length < 2) {\n      let nodeWord = nodes.length == 0 ? 'nodes' : 'node'\n      let content = (\n        <div className='popup-notice'>\n          <h1>Too few nodes.</h1>\n          <p>To run Dijkstra's algorithm, there must be atleast two nodes in the graph. \n          Create at least {2 - nodes.length} more {nodeWord} to visualize this algorithm.</p>\n          <button className=' btn popup-exit' onClick={disablePopup}>Got it!</button>\n        </div>\n      )\n      setPopupContent(content)\n      setPopupEnabled(true)\n      return\n    }\n    else if (!isConnected(nodes)) {\n      let content = (\n        <div style={{height: '400px'}} className='popup-notice'>\n          <h1>Graph not connected.</h1>\n          <p>To run Dijkstra's algorithm, there must be a path from each node to every other node in the graph using edges.\n          Connect the graph to visualize this algorithm.</p>\n          <button className='btn popup-exit' onClick={disablePopup}>Got it!</button>\n        </div>\n      )\n      setPopupContent(content)\n      setPopupEnabled(true)\n      return\n    }\n    let optionsContent = document.getElementById('options-dropdown-content')\n    let optionsButton = document.getElementById('options-button')\n    optionsContent.style.display = ''\n    optionsButton.style.border = 'none'\n\n    nodes.forEach((n) => {\n      let nodeElement = document.getElementById('node-' + (n.id).toString())\n      if (nodeElement.classList.contains('selected-element')) {\n        nodeElement.classList.remove('selected-element')\n      }\n    })\n    edges.forEach((e) => {\n      let edgeElement = document.getElementById('edge-' + (e.id).toString())\n      if (edgeElement.classList.contains('selected-element')) {\n        edgeElement.classList.remove('selected-element')\n      }\n    })\n    let content = (\n      <div>\n        <h1>Running Dijkstra's algorithm!</h1>\n        <p>To have Dijkstra's visualized, please select the starting node followed by the desired end node.</p>\n        <button className='btn popup-exit' onClick={disablePopup}>Got it!</button>\n      </div>\n    )\n    setPopupContent(content)\n    setPopupEnabled(true)\n    setAlgorithmInProgress(true)\n\n  }\n\n  function runDijkstras(start, end) {\n\n    nodes.forEach((n) => {\n      let nodeElement = document.getElementById('node-' + (n.id).toString())\n      if (nodeElement.classList.contains('selected-element')) {\n        nodeElement.classList.remove('selected-element')\n      }\n    })\n    \n    edges.forEach((e) => {\n      let edgeElement = document.getElementById('edge-' + (e.id).toString())\n      if (edgeElement.classList.contains('selected-element')) {\n        edgeElement.classList.remove('selected-element')\n      }\n    })\n    setTimeout(() => {\n      Dijkstras(nodes, start, end, setAlgorithmInProgress)\n    }, 400)\n  }\n\n  function createRandomGraph() {\n    if (popupEnabled) {\n      return\n    }\n    setIsGeneratingRandomGraph(true)\n    let timeoutTime = 0\n    let intervalTime = 125\n    let currentNodeIdForRandomGraph = currentNodeId\n    let currentEdgeIdForRandomGraph = currentEdgeId\n    if (nodes.length > 0 || edges.length > 0) {\n      clearGraph()\n      timeoutTime = 100\n    }\n    setTimeout(() => {\n      let graphElement = document.getElementById('graph')\n      let boundingRect = graphElement.getBoundingClientRect()\n      let o = offset(graphElement)\n      let graph = graphElement.getBoundingClientRect()\n      let y = boundingRect.y - o.top + 15,\n          x = boundingRect.x - o.left + 40,\n          height = graph.height,\n          width = graph.width,\n          yFieldDifference = 400,\n          xFieldDifference = 260,\n          yBound = y + height - yFieldDifference,\n          xBound = x + width - xFieldDifference\n          \n      let xClone = x\n      let nodesToSpawn = getRandomInt(3) + 2\n      let nodesSpawned = 0\n      let randomNodes = []\n      let randomEdges = []\n      let intervalID = setInterval(() => {\n        if (y >= yBound) {\n\n            if (isConnected(randomNodes)) {\n              setIsGeneratingRandomGraph(false)\n              clearInterval(intervalID)\n              return\n            }\n            let num1 = getRandomInt(randomNodes.length)\n            let num2 = getRandomInt(randomNodes.length)\n            while (num1 === num2) {\n              num2 = getRandomInt(randomNodes.length)\n            }\n            let n = 0\n            console.log(randomEdges)\n            while (n < randomEdges.length) {\n              console.log(n)\n              if ((randomEdges[n].node1.equals(randomNodes[num1]) && \n                randomEdges[n].node2.equals(randomNodes[num2])) || \n                (randomEdges[n].node1.equals(randomNodes[num2]) && \n                randomEdges[n].node2.equals(randomNodes[num1]))) {\n                  console.log('eee')\n                  num2 = getRandomInt(randomNodes.length)\n                  while (num1 !== num2) {\n                    num1 = getRandomInt(randomNodes.length)\n                    num2 = getRandomInt(randomNodes.length)\n                  }\n                  n = 0\n                  continue\n                }\n                n++\n            }\n            \n            let edge = new Edge(randomNodes[num1], randomNodes[num2])\n            randomNodes[num1].edges.push(edge)\n            randomNodes[num2].edges.push(edge)\n            edge.id = currentEdgeIdForRandomGraph\n            currentEdgeIdForRandomGraph++\n            setCurrentEdgeId(currentEdgeId + 1)\n            randomEdges.push(edge)\n            setEdges(edges.concat(randomEdges).filter((e => edges.indexOf(e) < 0)))\n            return            \n        }\n        else {\n          let thisX = x + 10 + getRandomInt(xFieldDifference / 2)\n          let thisY = y + 10 + getRandomInt(yFieldDifference / 2)\n          let node = new Node(thisX, thisY)\n          node.id = currentNodeIdForRandomGraph\n          currentNodeIdForRandomGraph++\n          setCurrentNodeId(currentNodeId + 1)\n          randomNodes.push(node)\n          setNodes(nodes.concat(randomNodes).filter((n => nodes.indexOf(n) < 0)))\n          if (randomNodes.length > 0 || nodesSpawned >= nodesToSpawn) {\n            randomNodes.pop()\n          }\n          randomNodes.push(node)\n          if (x >= xBound - xFieldDifference) {\n            x = xClone\n            y += yFieldDifference\n            nodesSpawned = 0\n          }\n          else {\n            x += xFieldDifference\n            nodesSpawned++\n          }\n        }\n      }\n      , intervalTime)\n    }, timeoutTime)\n  }\n\n  function spawnNode(e) {\n    if (!createGraphManuallyEnabled || algorithmInProgress || algorithmJustFinished) {\n      return\n    }\n    if (e.target.classList.contains('edge')) {\n\n      return\n    }\n    var graph = document.getElementById('graph')\n    var o = offset(graph)\n    var x = e.pageX - o.left\n    var y = e.pageY - o.top\n    let isValid = true\n    nodes.forEach((node) => {\n      if (pointIsOnNode(x, y, node)) {\n        isValid = false\n        return\n      }\n    })\n    if (!isValid) {\n      return\n    }\n    var newNode = new Node(x, y)\n    setNodes([...nodes, newNode])\n  }\n\n  function spawnEdge(node1, node2) {\n    for (let i = 0; i < edges.length; i++) {\n      if ((edges[i].node1.equals(node1) && edges[i].node2.equals(node2)) || \n        (edges[i].node1.equals(node2) && edges[i].node2.equals(node1))) {\n          return\n        }\n    }\n    var newEdge = new Edge(node1, node2)\n    newEdge.node1.edges.push(newEdge)\n    newEdge.node2.edges.push(newEdge)\n    setEdges([...edges, newEdge])\n  }\n\n  function nodeOnClick(node) {\n    if (algorithmJustFinished) {\n      if (algorithmInProgress) {\n        setAlgorithmJustFinished(false)\n      }\n      else {\n        return\n      }\n    }\n    if (algorithmInProgress) {\n      if (startNode && endNode) {\n        return\n      }\n      document.getElementById('node-' + (node.id).toString()).classList.add('selected-element')\n      if (startNode == null) {\n        setStartNode(node)\n        return\n      }\n      else if (endNode == null) {\n        if (!node.equals(startNode)) {\n          setEndNode(node)\n          setTimeout(() => {\n            document.getElementById('node-' + (node.id).toString()).classList.remove('selected-element')\n            document.getElementById('node-' + (startNode.id).toString()).classList.remove('selected-element')\n            setEndNode(node)\n            runDijkstras(startNode, node)\n            setAlgorithmJustFinished(true)\n            setStartNode(null)\n            setEndNode(null)\n          }, 800)\n          return\n        }\n        else {\n          return\n        }\n      }\n    }\n    if (selectedOption === options[0] || \n        selectedOption === options[2]) {\n      return\n    }\n    if (selectedNode == null) {\n      let n = document.getElementById('node-' + (node.id).toString())\n      n.classList.add('selected-element')\n      setSelectedNode(node)\n    }\n    else {\n      if (selectedNode.equals(node)) {\n        return\n      }\n      let n = document.getElementById('node-' + (selectedNode.id).toString())\n      n.classList.remove('selected-element')\n      spawnEdge(selectedNode, node)\n      setSelectedNode(null)\n    }\n  }\n  \n  function nodeOnDelete() {\n    if (selectedNode == null || popupEnabled) {\n      return\n    }\n    let nodeToDelete = selectedNode\n    let nodeElement = document.getElementById('node-' + (nodeToDelete.id).toString())\n    if (nodeToDelete.edges.length > 0) {\n      for (let i = 0; i < nodeToDelete.edges.length; i++) {\n        let edgeElement = document.getElementById('edge-' + (nodeToDelete.edges[i].id).toString())\n        if (edgeElement == null) {\n          continue\n        }\n        edgeElement.classList.remove('created-element')\n        edgeElement.classList.add('deleted-element')\n      }\n    }\n    nodeElement.classList.remove('created-element')\n    nodeElement.classList.add('deleted-element')\n    setTimeout(() => {\n      setSelectedNode(null)\n      setNodes(nodes.filter(node => node.id !== nodeToDelete.id))\n      let idsToDelete = []\n      if (nodeToDelete.edges.length > 0) {\n        for (let x = 0; x < nodeToDelete.edges.length; x++) {\n          idsToDelete.push(nodeToDelete.edges[x].id)\n          let nodeEdges = nodeToDelete.edges[x].node1.equals(nodeToDelete) ? nodeToDelete.edges[x].node2.edges : \n            nodeToDelete.edges[x].node1.edges\n          for (let j = 0; j < nodeEdges.length; j++) {\n            if (nodeEdges[j].equals(nodeToDelete.edges[x])) {\n              nodeEdges.splice(j, 1)\n              break\n            }\n          }\n        }\n        setEdges(edges.filter(edge => !idsToDelete.includes(edge.id)))\n      }\n    }, 301)\n  }\n\n  function appOnClick(e) {\n    if (algorithmInProgress) {\n      return\n    }\n    if (selectedNode != null) {\n      var graph = document.getElementById('graph')\n      var o = offset(graph)\n      var x = e.pageX - o.left\n      var y = e.pageY - o.right\n      if (pointIsOnNode(x, y, selectedNode)) {\n        return\n      }\n      let n = document.getElementById('node-' + (selectedNode.id).toString())\n      n.classList.remove('selected-element')\n      setSelectedNode(null)\n    }\n    if (selectedEdge != null) {\n      let e = document.getElementById('edge-' + (selectedEdge.id).toString())\n      e.classList.remove('selected-element')\n      setSelectedEdge(null)\n    }\n  }\n\n  async function edgeOnClick(e, edge) {\n    if (selectedOption === options[2] || \n        selectedOption === options[0] || \n        algorithmInProgress || \n        algorithmJustFinished) {\n      return\n    }\n    \n    setTimeout(() => {\n      setSelectedEdge(edge)\n      let e = document.getElementById('edge-' + (edge.id).toString())\n      e.classList.add('selected-element')\n    }, 2)\n  }\n\n  function edgeOnDelete() {\n    if (selectedEdge == null || popupEnabled) {\n      return\n    }\n    for (let i = 0; i < selectedEdge.node1.edges.length; i++) {\n      if (selectedEdge.node1.edges[i].equals(selectedEdge)) {\n        selectedEdge.node1.edges.splice(i, 1)\n        break\n      }\n    }\n    for (let i = 0; i < selectedEdge.node2.edges.length; i++) {\n      if (selectedEdge.node2.edges[i].equals(selectedEdge)) {\n        selectedEdge.node2.edges.splice(i, 1)\n        break\n      }\n    }\n    let edgeElement = document.getElementById('edge-' + (selectedEdge.id).toString())\n    edgeElement.classList.remove('created-element')\n    edgeElement.classList.add('deleted-element')\n    setTimeout(() => {\n      setEdges(edges.filter(edge => edge.id !== selectedEdge.id))\n      setSelectedEdge(null)\n    }, 301)\n  }\n\n  function clickedOptions() {\n    if (algorithmInProgress || popupEnabled) {\n      return\n    }\n    window.event.preventDefault()\n    let content = document.getElementById('options-dropdown-content')\n    let button = document.getElementById('options-button')\n    if (content.style.display === '') {\n      content.style.display = 'block'\n      button.style.border = '1px solid lightblue'\n      button.style.borderRadius = '8px'\n    }\n    else {\n      content.style.display = ''\n      button.style.border = 'none'\n      button.style.borderRadius = '0'\n    }\n  }\n\n  return (\n    <div className=\"App\" onClick={(e) => appOnClick(e)}>\n      <Popup content={popupContent} enabled={popupEnabled} />\n      <Header/>\n      <InteractiveBox options={options} getSelectedOption={GetSelectedOption} clickedOptions={clickedOptions} \n        runTutorial={runTutorial} />\n      <DropDownBox isActive={dropdownIsActive} selectedOption={selectedOption} nodeOnDelete={nodeOnDelete} \n        selectedNode={selectedNode} selectedEdge={selectedEdge} edgeOnDelete={edgeOnDelete} clearGraph={clearGraph} \n        createRandomGraph={createRandomGraph} runAlgorithm={runAlgorithm} nodes={nodes}\n        algorithmInProgress={algorithmInProgress} isGeneratingRandomGraph={isGeneratingRandomGraph} />\n      <Graph nodes={nodes} onClick={spawnNode} nodeOnClick={(node) => nodeOnClick(node)} \n      nodeOnDelete={nodeOnDelete} edges={edges} edgeOnClick={edgeOnClick} edgeOnDelete={edgeOnDelete} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}